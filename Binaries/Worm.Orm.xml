<?xml version="1.0"?>
<doc>
<assembly>
<name>
Worm.Orm
</name>
</assembly>
<members>
<member name="M:Worm.Entities.KeyEntityBase.Equals(System.Object)">
	<param name="obj">The System.Object to compare with the current System.Object.</param>
	<returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
</member><member name="M:Worm.Entities.KeyEntityBase.GetHashCode">
	<returns>A hash code for the current System.Object.</returns>
</member><member name="T:Worm.Entities.KeyEntityBase">
	<summary>
 Базовый класс для всех типов
 </summary>
	<remarks>
 Класс является потокобезопасным как на чтение так и на запись.
 Предоставляет следующий функционал:
 XML сериализация/десериализация. Реализована с некоторыми ограничениями. Для изменения поведения необходимо переопределить <see cref="M:Worm.Entities.CachedEntity.ReadXml(System.Xml.XmlReader)"/> и <see cref="M:Worm.Entities.CachedEntity.WriteXml(System.Xml.XmlWriter)"/>.
 <code lang="vb">Это код</code>
		<example>Это пример</example>
	</remarks>
</member><member name="F:Worm.Entities.ObjectState.None">
	<summary>
 Объект загружен из БД
 </summary>
</member><member name="F:Worm.Entities.ObjectState.NotFoundInSource">
	<summary>
 Попытка загрузить данный обьект из БД не удалась. Это может быть из-за того, что, например, он был удален.
 </summary>
</member><member name="F:Worm.Entities.ObjectState.Clone">
	<summary>
 Объект является копией редактируемого объекта
 </summary>
</member><member name="F:Worm.Entities.ObjectState.NotLoaded">
	<summary>
 Специальное состояние, между Created и None, когда объект ожидается что есть в базе, но еще не загружен
 </summary>
</member><member name="M:Worm.Database.SQLGenerator.Sort(System.Collections.Generic.IDictionary{Worm.Entities.Meta.SourceFragment,System.Collections.Generic.List{Worm.Criteria.Core.ITemplateFilter}},Worm.Entities.Meta.SourceFragment[])">
	<summary>
 Сортирует словарь в соответствии с порядком ключей в коллекции
 </summary>
	<param name="dic">Словарь</param>
	<param name="model">Упорядоченная коллекция ключей</param>
	<returns>Список пар ключ/значение из словаря, упорядоченный по коллекции <b>model</b></returns>
	<exception cref="T:System.InvalidOperationException">Если ключ из словаря не найден в коллекции <b>model</b></exception>
</member><member name="M:Worm.Database.SQLGenerator.AppendNativeTypeJoins(Worm.ObjectMappingEngine,System.Type,Worm.Entities.Meta.AliasMgr,Worm.Entities.Meta.SourceFragment[],System.Text.StringBuilder,Worm.Database.ParamMgr,Worm.Entities.Meta.SourceFragment,System.String,System.Boolean,System.Object,Worm.Entities.Meta.IEntitySchema)">
	<summary>
 Добавление джоинов для типа, когда основная таблица может не линковаться
 </summary>
	<param name="selectedType"></param>
	<param name="almgr"></param>
	<param name="tables"></param>
	<param name="selectcmd"></param>
	<param name="pname"></param>
	<param name="table"></param>
	<param name="id">имя внешнего ключевого поля</param>
	<param name="appendMainTable"></param>
	<remarks></remarks>
</member><member name="M:Worm.Database.SQLGenerator.AppendFromM2M(Worm.ObjectMappingEngine,System.Type,Worm.Entities.Meta.AliasMgr,Worm.Entities.Meta.SourceFragment[],System.Text.StringBuilder,Worm.Database.ParamMgr,Worm.Entities.Meta.SourceFragment,System.String,System.Boolean,System.Object,Worm.Entities.Meta.IEntitySchema)">
	<summary>
 Построение таблиц для many to many связи
 </summary>
	<param name="selectedType"></param>
	<param name="almgr"></param>
	<param name="tables"></param>
	<param name="selectcmd"></param>
	<param name="pname"></param>
	<param name="table"></param>
	<param name="id"></param>
	<param name="appendMainTable"></param>
	<remarks></remarks>
</member><member name="M:Worm.Database.SQLGenerator.AppendFrom(Worm.ObjectMappingEngine,Worm.IPrepareTable,System.Object,Worm.Entities.Meta.SourceFragment[],System.Text.StringBuilder,Worm.Entities.Meta.ICreateParam,Worm.Entities.Meta.IMultiTableObjectSchema,System.Type)">
	<summary>
 Построение таблиц, включая джоины
 </summary>
	<param name="almgr"></param>
	<param name="tables"></param>
	<param name="selectcmd"></param>
	<param name="pname"></param>
	<param name="sch"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Worm.Entities.Meta.EntityPropertyAttribute.PropertyAlias">
	<summary>
 Имя поля класса, которое мапится на колонку в БД
 </summary>
</member><member name="P:Worm.Entities.Meta.EntityPropertyAttribute.ColumnName">
	<summary>
 Column alias
 </summary>
	<value></value>
	<returns>Column alias</returns>
	<remarks></remarks>
</member><member name="F:Worm.Entities.Meta.Field2DbRelations.RowVersion">
	<summary>
 RV or [ReadOnly] or SyncUpdate or SyncInsert
 </summary>
	<remarks></remarks>
</member><member name="F:Worm.Entities.Meta.Field2DbRelations.PrimaryKey">
	<summary>
 PK or SyncInsert or [ReadOnly]
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.OrmManager.LoadObjects``1(Worm.ReadOnlyEntityList{``0},System.String[],System.Int32,System.Int32)">
	<summary>
 Load parent objects from collection of childs
 </summary>
	<typeparam name="T">Type of child collection</typeparam>
	<param name="objs">Child collection</param>
	<param name="fields">Array of properties in child type, used to get parent object</param>
	<param name="start">Point in child collection from where start to load</param>
	<param name="length">Length of loaded window</param>
	<returns>Collection of child objects</returns>
	<remarks></remarks>
</member><member name="M:Worm.ObjectMappingException.#ctor">
	<summary>
 Конструктор по умолчанию
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.ObjectMappingException.#ctor(System.String)">
	<summary>
 Конструктор для создания объекта через сообщение
 </summary>
	<param name="message">Строка сообщения</param>
	<remarks></remarks>
</member><member name="M:Worm.ObjectMappingException.#ctor(System.String,System.Exception)">
	<summary>
 Конструктор для создания объекта через сообщение и внутренее инсключение
 </summary>
	<param name="message">Строка сообщения</param>
	<param name="inner">Исключение</param>
	<remarks></remarks>
</member><member name="T:Worm.ObjectMappingException">
	<summary>
 Данное исключение выбрасывается при определеных ошибках в <see cref="T:Worm.ObjectMappingEngine"/>
	</summary>
	<remarks></remarks>
</member><member name="T:Worm.ObjectMappingEngine">
	<summary>
 Класс хранения и управления схемами объектов <see cref="T:Worm.Entities.Meta.IEntitySchema"/>
	</summary>
	<remarks>Класс управляет версиями схем объектов, предоставляет удобные обертки для методов
 <see cref="T:Worm.Entities.Meta.IEntitySchema"/> через тип объекта.</remarks>
</member><member name="P:Worm.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Worm.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Worm.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Worm.Entities.CachedEntity.InternalClass.OriginalCopy">
	<summary>
 Модифицированная версия объекта
 </summary>
</member><member name="M:Worm.Entities.CachedEntity.RejectChanges">
	<summary>
 Отмена изменений
 </summary>
</member><member name="M:Worm.Entities.Meta.OrmObjectIndex.GetKeyForItem(Worm.Entities.Meta.MapField2Column)">
	<summary>
 Возвращает ключ коллекции MapField2Column
 </summary>
	<param name="item">Элемент коллекции</param>
	<returns>Возвращает <see cref="F:Worm.Entities.Meta.MapField2Column._propertyAlias"/></returns>
	<remarks>Используется при индексации коллекции</remarks>
</member><member name="T:Worm.Entities.Meta.OrmObjectIndex">
	<summary>
 Индексированая по полю <see cref="F:Worm.Entities.Meta.MapField2Column._propertyAlias"/> колекция объектов типа <see cref="T:Worm.Entities.Meta.MapField2Column"/>
	</summary>
	<remarks>
 Наследник абстрактного класс <see cref="T:Worm.Collections.IndexedCollection`2"/>, реализующий метод <see cref="M:Worm.Collections.IndexedCollection`2.GetKeyForItem(`1)"/>
	</remarks>
</member><member name="F:Worm.Misc.DicIndexBase._parent">
	<summary>
 родительский элемент
 </summary>
</member><member name="F:Worm.Misc.DicIndexBase._count">
	<summary>
 количество элементов на данном уровне
 </summary>
</member><member name="M:Worm.Misc.DicIndexBase.GetHashCode">
	<returns>A hash code for the current System.Object.</returns>
</member><member name="M:Worm.Database.OrmReadOnlyDBManager.Rollback">
	<summary>
 Отменяет изменения, выполненные в транзакции
 </summary>
	<remarks>Состояние измененных объектов после отмены изменений на уровне БД не меняется, так что нужно в ручную снова выполнить загрузку их из БД</remarks>
</member><member name="F:Worm.Cache.OrmCache._invalidate">
	<summary>
 dictionary.key - тип
 dictionary.value - массив изменяемых полей
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.Cache.OrmCache.AddDepend(Worm.Entities.ICachedEntity,System.String,System.String)">
	<summary>
 Зависимость экземпляра объекта от ключа (объект присутствует в фильтре)
 </summary>
	<param name="obj"></param>
	<param name="key"></param>
	<param name="id"></param>
	<remarks></remarks>
</member><member name="M:Worm.Cache.OrmCache.RemoveDepends(Worm.Entities.ICachedEntity)">
	<summary>
 Удаляет все ключи в кеше, которые зависят от данного объекта
 </summary>
	<param name="obj"></param>
	<remarks></remarks>
</member><member name="M:Worm.helper.ShouldPrefix(System.String)">
	<summary>
 Метод определяет нужно ли добавлять псевдоним таблицы для поля в БД
 </summary>
	<param name="str">Название поля в БД</param>
	<returns><b>true</b> если псевдоним необходим. В противном случае <b>false</b></returns>
	<remarks>Для вычисляемых полей или скалярных подзапросов префикс (псевдоним) таблицы не нужен.</remarks>
</member><member name="M:Worm.helper.ExtractParamsCount(System.String)">
	<summary>
 Метод используется для подсчета кол-ва безымяных параметров в выражении
 </summary>
	<param name="stmt">Вырежение</param>
	<returns>Кол-во безымянных параметров</returns>
	<remarks></remarks>
</member><member name="M:Worm.helper.IsEqualByteArray(System.Byte[],System.Byte[])">
	<summary>
 Сравнение массива байт
 </summary>
	<param name="arr1">Первый массив</param>
	<param name="arr2">Второй массив</param>
	<returns><b>true</b> если массивы идентичны</returns>
	<remarks></remarks>
</member><member name="M:Worm.helper.MergeResult.#ctor(System.Collections.Generic.ICollection{CoreFramework.Structures.Pair{System.Int32}},System.Collections.Generic.ICollection{System.Int32})">
	<summary>
 Конструктор класса
 </summary>
	<param name="pairs">Коллекция диапазонов чисел (от <see cref="P:CoreFramework.Structures.Pair`1.First"/> до <see cref="P:CoreFramework.Structures.Pair`1.Second"/>)</param>
	<param name="rest">Остаток (числа сами по себе)</param>
	<remarks></remarks>
</member><member name="P:Worm.helper.MergeResult.Pairs">
	<summary>
 Диапазон чисел
 </summary>
	<returns>Коллекция диапазонов чисел (от <see cref="P:CoreFramework.Structures.Pair`1.First"/> до <see cref="P:CoreFramework.Structures.Pair`1.Second"/>)</returns>
	<remarks></remarks>
</member><member name="P:Worm.helper.MergeResult.Rest">
	<summary>
 Остаток
 </summary>
	<returns>Коллекция чисел</returns>
	<remarks></remarks>
</member><member name="T:Worm.helper.MergeResult">
	<summary>
 Класс представляет собой результат склейки коллекции чисел
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.helper.MergeIds(System.Collections.Generic.List{System.Int32},System.Boolean)">
	<summary>
 Cклейка коллекции чисел для оптимизации запросов
 </summary>
	<param name="ids">Коллекция чисел</param>
	<param name="sort"><b>true</b> если коллекция <b>ids</b> уже упорядочена</param>
	<returns>Экземпляр типа <see cref="T:Worm.helper.MergeResult"/></returns>
	<remarks>Метод выполняет оптимизацию коллекции чисел для уменьшения размер строки.
 Используется для оптимизации условий в условии in (...). Например, вместо
 in (1,2,3,4,5,6,7) получается between 1 and 7
 </remarks>
</member><member name="T:Worm.helper">
	<summary>
 Модуль небольших функций для внутреннего использования по всему солюшену
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.ObjectWrap`1.#ctor(`0)">
	<summary>
 Конструктор
 </summary>
	<param name="o">Экземпляр типа</param>
	<remarks></remarks>
</member><member name="P:Worm.ObjectWrap`1.Value">
	<summary>
 Экземпляр типа
 </summary>
	<value>Устанавливаемое значение</value>
	<returns>Установленое значение</returns>
	<remarks></remarks>
</member><member name="M:Worm.TypeWrap`1.#ctor(`0)">
	<summary>
 Конструктор
 </summary>
	<param name="o">Экземпляр типа</param>
	<remarks></remarks>
</member><member name="M:Worm.TypeWrap`1.Equals(System.Object)">
	<summary>
 Определение равенства объектов
 </summary>
	<param name="obj">Объект</param>
	<returns><b>true</b> если объекты равны</returns>
	<remarks></remarks>
</member><member name="M:Worm.TypeWrap`1.Equals(Worm.TypeWrap{`0})">
	<summary>
 Типизированое определение равенства объектов
 </summary>
	<param name="obj">Объект</param>
	<returns><b>true</b> если объекты равны</returns>
	<remarks>Операция сравнение с типом Т дает <b>false</b></remarks>
</member><member name="M:Worm.TypeWrap`1.ToString">
	<summary>
 Преобразование типа в строку
 </summary>
	<returns>Строка</returns>
	<remarks>Делегирует вызов внутренему объекту</remarks>
</member><member name="M:Worm.TypeWrap`1.GetHashCode">
	<summary>
 Преобразование в число
 </summary>
	<returns>Число</returns>
	<remarks>Делегирует вызов внутренему объекту</remarks>
</member><member name="T:Worm.TypeWrap`1">
	<summary>
 Обертка над типом
 </summary>
	<typeparam name="T">Тип</typeparam>
	<remarks>Необходима для устранения операций неявного приведения типов</remarks>
</member><member name="M:Worm.PerfCounter.QueryPerformanceCounter(System.Int64@)">
	<summary>
 The QueryPerformanceCounter function retrieves the current value of the high-resolution performance counter
 </summary>
	<param name="X">Variable that receives the current performance-counter value, in counts</param>
	<returns>If the function succeeds, the return value is <b>true</b></returns>
	<remarks>Делегация системному вызову</remarks>
</member><member name="M:Worm.PerfCounter.QueryPerformanceFrequency(System.Int64@)">
	<summary>
 The QueryPerformanceFrequency function retrieves the frequency of the high-resolution performance counter, if one exists. The frequency cannot change while the system is running
 </summary>
	<param name="X">variable that receives the current performance-counter frequency, in counts per second. If the installed hardware does not support a high-resolution performance counter, this parameter can be zero.</param>
	<returns>If the function succeeds, the return value is <b>true</b></returns>
	<remarks>Делегация системному вызову</remarks>
</member><member name="M:Worm.PerfCounter.#ctor">
	<summary>
 Констуктор
 </summary>
	<remarks>Начала отсчета</remarks>
</member><member name="M:Worm.PerfCounter.GetTime">
	<summary>
 Функция окончания отсчета времени
 </summary>
	<returns>Временой промежуток прошедщий с момента создания данного экземпляра</returns>
	<remarks></remarks>
</member><member name="T:Worm.PerfCounter">
	<summary>
 Класс, повзволяющий точно замерять промежутки времени
 </summary>
	<remarks></remarks>
</member><member name="M:Worm.IPrepareTable.AddTable(Worm.Entities.Meta.SourceFragment@,Worm.Query.EntityUnion)">
	<summary>
 Добавляет таблицу в словарь и создает текстовое представление таблицы (псевдоним)
 </summary>
	<param name="table">Таблица</param>
	<returns>Возвращает псевдоним таблицы</returns>
	<remarks>Если таблица уже добавлена реализация может кинуть исключение</remarks>
</member><member name="T:Worm.IPrepareTable">
	<summary>
 Интерфейс для "подготовки" таблицы перед генерацией запроса
 </summary>
	<remarks>Используется для реализации функций в качестве таблиц, разрешения схем таблицы (schema resolve)</remarks>
</member>
</members>
</doc>